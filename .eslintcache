{"E:\\project\\vue_v2\\src\\componentJS\\head.js":{"size":275,"mtime":1510055368161,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\componentJS\\head.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\componentJS\\leftNavigation.js":{"size":226,"mtime":1510055368162,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\componentJS\\leftNavigation.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\index.js":{"size":2080,"mtime":1510019203703,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-attribute.vue":{"size":3791,"mtime":1510055368163,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-attribute.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-boolean.vue":{"size":2452,"mtime":1510055368165,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-boolean.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-date.vue":{"size":3301,"mtime":1510055368166,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-date.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-fileUpload.vue":{"size":5183,"mtime":1510055368166,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-fileUpload.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-form.vue":{"size":7923,"mtime":1510055368167,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-form.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-input.vue":{"size":3927,"mtime":1510055368168,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-input.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-label.vue":{"size":270,"mtime":1510055368168,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-label.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-labelInput.vue":{"size":3826,"mtime":1510055368169,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-labelInput.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-loading.vue":{"size":10174,"mtime":1510055368169,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-loading.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-mail.vue":{"size":847,"mtime":1510055368170,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-mail.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-number.vue":{"size":5402,"mtime":1510055368170,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-number.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-picUpload.vue":{"size":6601,"mtime":1510055368171,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-picUpload.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-radio.vue":{"size":2667,"mtime":1510055368172,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-radio.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-row.vue":{"size":1095,"mtime":1510055368173,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-row.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-select.vue":{"size":4178,"mtime":1510055368174,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-select.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-steps.vue":{"size":2285,"mtime":1510055368175,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-steps.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-switch.vue":{"size":1224,"mtime":1510055368175,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-switch.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-tab.vue":{"size":700,"mtime":1510055368176,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-tab.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-time.vue":{"size":2398,"mtime":1510055368177,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-time.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\index.js":{"size":718,"mtime":1510055368178,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-boFilter.vue":{"size":9756,"mtime":1510055368178,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-boFilter.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-filterBasic.vue":{"size":18611,"mtime":1510055368181,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-filterBasic.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-navSelect.vue":{"size":3443,"mtime":1510055368181,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\boFilterNEW_vuex\\m-navSelect.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\boTree\\index.js":{"size":613,"mtime":1510055368190,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\boTree\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\email\\index.js":{"size":622,"mtime":1510055368202,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\email\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelCity.vue":{"size":163,"mtime":1510055368207,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelCity.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelClassify.vue":{"size":2251,"mtime":1510055368208,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelClassify.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelCommunity.vue":{"size":166,"mtime":1510055368208,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelCommunity.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelDistrict.vue":{"size":163,"mtime":1510055368209,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelDistrict.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelProvince.vue":{"size":163,"mtime":1510055368209,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelProvince.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelPump.vue":{"size":2816,"mtime":1509419410069,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\levelPump.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\m-tabMapMonitor.vue":{"size":11436,"mtime":1509419410069,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\m-tabMapMonitor.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabCurveNow.vue":{"size":6055,"mtime":1509419410070,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabCurveNow.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabFaultHistory.vue":{"size":2123,"mtime":1509419410070,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabFaultHistory.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabFaultNow.vue":{"size":2138,"mtime":1509419410071,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabFaultNow.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabGridMonitor.vue":{"size":2482,"mtime":1509419410071,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabGridMonitor.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabProduceMonitor.vue":{"size":16440,"mtime":1509419410072,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabProduceMonitor.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabStartStopAnls.vue":{"size":6238,"mtime":1509419410072,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\monitor\\tabStartStopAnls.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\index.js":{"size":801,"mtime":1510055368210,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectDetails.vue":{"size":10433,"mtime":1509692996701,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectDetails.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectOut.vue":{"size":5322,"mtime":1509692996705,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectOut.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectPerson.vue":{"size":412,"mtime":1509692996708,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectPerson.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectSummary.vue":{"size":18859,"mtime":1509692996722,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-projectSummary.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-taskSteps.vue":{"size":16148,"mtime":1509419410076,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\project\\m-taskSteps.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\m-workCenter.vue":{"size":15572,"mtime":1509419410078,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\m-workCenter.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\workCenter.vue":{"size":19197,"mtime":1509419410078,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\workCenter.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\workDesk.vue":{"size":9345,"mtime":1509419410079,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workCenter\\workDesk.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\index.js":{"size":404,"mtime":1510055368215,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflow.vue":{"size":4003,"mtime":1510055368216,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflow.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflowCheck.vue":{"size":6395,"mtime":1510055368216,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflowCheck.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflowDetails.vue":{"size":6694,"mtime":1510055368217,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\businessModule\\workflow\\workflowDetails.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\index.js":{"size":4708,"mtime":1510055368218,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-billMeta.vue":{"size":1429,"mtime":1510055769113,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-billMeta.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-boMeta.vue":{"size":1359,"mtime":1510055777367,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-boMeta.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-boTemplate.vue":{"size":1923,"mtime":1510055784053,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-boTemplate.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-bottomModal.vue":{"size":3311,"mtime":1510055790806,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-bottomModal.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-card.vue":{"size":1062,"mtime":1510055796153,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-card.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-coin.vue":{"size":932,"mtime":1510055368221,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-coin.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-confirm.vue":{"size":1174,"mtime":1510055810346,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-confirm.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-entry.vue":{"size":724,"mtime":1510055368224,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-entry.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-filter.vue":{"size":1929,"mtime":1510055831851,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-filter.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-filterPrice.vue":{"size":4064,"mtime":1510055837152,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-filterPrice.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-filterRow.vue":{"size":1549,"mtime":1510055845864,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-filterRow.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-head.vue":{"size":5333,"mtime":1510055852375,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-head.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-index.vue":{"size":709,"mtime":1510055368227,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-index.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-isBuilding.vue":{"size":198,"mtime":1510055864423,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-isBuilding.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-layout-content-default.vue":{"size":8595,"mtime":1510055899017,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-layout-content-default.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-layout-content.vue":{"size":11013,"mtime":1510055893648,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-layout-content.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-layout.vue":{"size":6057,"mtime":1510055368231,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-layout.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-listFilter.vue":{"size":5337,"mtime":1510055368232,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-listFilter.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-listTable.vue":{"size":2659,"mtime":1510055920557,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-listTable.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-listView.vue":{"size":4942,"mtime":1510055944279,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-listView.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-main-content.vue":{"size":7275,"mtime":1510055958143,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-main-content.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-main.vue":{"size":9657,"mtime":1510055368236,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-main.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-menu.vue":{"size":981,"mtime":1510055964271,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-menu.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-modal.vue":{"size":1219,"mtime":1510055368237,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-modal.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-navigation.vue":{"size":899,"mtime":1510055368238,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-navigation.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-page.vue":{"size":872,"mtime":1510055368238,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-page.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-priceTable.vue":{"size":4130,"mtime":1510055368239,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-priceTable.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-section.vue":{"size":966,"mtime":1510055368239,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-section.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-slideout.vue":{"size":7016,"mtime":1510055368240,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-slideout.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-tab.vue":{"size":1501,"mtime":1510055368241,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-tab.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-table-f.vue":{"size":8285,"mtime":1510055368242,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-table-f.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-table-shim.js":{"size":1954,"mtime":1510055368242,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-table-shim.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-table2.vue":{"size":1142,"mtime":1510055368244,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-table2.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\m-tree.vue":{"size":1650,"mtime":1510055368245,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-tree.vue","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\mixin.js":{"size":2889,"mtime":1510055368246,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\mixin.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\taskPlan\\index.js":{"size":244,"mtime":1510055368247,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\taskPlan\\index.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\main.js":{"size":738,"mtime":1510055727288,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\main.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\router\\bus.js":{"size":94,"mtime":1510055368254,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\router\\bus.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\utils\\DefineFetcher.js":{"size":1915,"mtime":1510055368256,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\utils\\DefineFetcher.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\utils\\utils.js":{"size":869,"mtime":1510055368258,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\utils\\utils.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\Mutation.js":{"size":1603,"mtime":1510055368258,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\Mutation.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store_component_page_data.js":{"size":646,"mtime":1510055368259,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store_component_page_data.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store_pageData.js":{"size":2039,"mtime":1510055368260,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store_pageData.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store_pageStatus.js":{"size":631,"mtime":1510055368260,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store_pageStatus.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store_pageValid.js":{"size":1130,"mtime":1510055368261,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store_pageValid.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store_workCenter.js":{"size":1573,"mtime":1510055368262,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store_workCenter.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\vuex\\store.js":{"size":412,"mtime":1510055368263,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\vuex\\store.js","messages":[],"errorCount":0,"warningCount":0}},"E:\\project\\vue_v2\\src\\components\\base\\m-bo.vue":{"size":5701,"mtime":1510055368165,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\base\\m-bo.vue","messages":[],"errorCount":0,"warningCount":0,"output":"<template>\r\n  <span>\r\n      <Input v-model=\"displayValue\" readonly>\r\n        <Button slot=\"append\" @click=\"modal = (!readonly)\">选择</Button>\r\n    </Input>\r\n    <Modal v-model=\"modal\" title=\"\" width=\"900\" @on-ok=\"ok\">\r\n          <Table border :columns=\"colums\" :data=\"data\" v-if=\"chooseStatus === 'radio'\"></Table>\r\n          <Table border :columns=\"colums\" :data=\"data\" @on-select=\"selectRow\" @on-select-all=\"selectAll\" v-if=\"chooseStatus === 'checkbox'\"></Table>\r\n          <div slot=\"footer\" v-if=\"chooseStatus === 'radio'\"></div>\r\n      </Modal>\r\n      <div v-if=\"hasError\" class=\"item-error\">{{errorMessage}}</div>\r\n  </span>\r\n</template>\r\n<script>\r\n  //  import bus from '../../router/bus'\n  import _ from 'lodash'\n  import { default as fetch } from '../../utils/DefineFetcher'\n\n  export default {\n      name: 'm-bo',\n      props: ['define', 'content'],\n      data () {\n          return {\n              hasError: false,\n              errorMessage: '',\n        //\n              chooseStatus: 'radio',\n              container: '',\n              value: '',\n              formRight: {\n                  input1: ''\n              },\n              modal: false,\n              data: [{}],\n              colums: [{}],\n              columsDefine: {}\n//                displayValue: ''\n          }\n      },\n      mounted () {\n//            bus.$on('forceValid', () => {\n//                this.valid();\n//            });\n          let url = this.define.colums_url\n          if (url) {\n              fetch(url, (error, body) => {\n                  if (error === null) {\n                      this.columsDefine = body\n                      this.colums = body.fieldInfo\n                      this.colums.push({\n                          title: '操作',\n                          key: 'action',\n                          width: 150,\n                          align: 'center',\n                          render: (h, params) => {\n                              return h('div', [\n                                  h('Button', {\n                                      props: {\n                                          type: 'success'\n                                      },\n                                      on: {\n                                          click: () => {\n                                              this.choose(params.row)\n                                          }\n                                      }\n                                  }, '选择')\n                              ])\n                          }\n                      })\n                  }\n              })\n          } else {\n              this.colums = [{}]\n          }\n          let dataUrl = this.define.data_url\n          if (dataUrl) {\n              fetch(dataUrl, (error, body) => {\n                  if (error === null) {\n                      this.data = body\n                  }\n              })\n          } else {\n              this.data = [{}]\n          }\n      },\n      computed: {\n          confirm () {\n              return _.get(this.define, 'confirm', false)\n          },\n          clearable () {\n              return _.get(this.define, 'clearable', true)\n          },\n          readonly () {\n              let readonly = _.get(this.$store.state.pageStatus.status, this.name, 'readonly').trim()\n              let regex = /^readonly$/i\n              return regex.test(readonly) || readonly === true\n          },\n          name () {\n              return _.get(this.define, 'name', '')\n          },\n          'exContent': function () {\n              return _.get(this.define, 'exContent', {})\n          },\n          storeValue: {\n              get () {\n                  return _.get(this.$store.state.pageData.data, [this.name, 'value'], '')\n              },\n              set (value) {\n                  this.$store.commit('updateItem', {name: this.name, exContent: this.exContent, value: value})\n              }\n          },\n          textKey () {\n              return _.get(this.columsDefine, 'textKey', '')\n          },\n          idKey () {\n              return _.get(this.columsDefine, 'idKey', '')\n          },\n          displayValue () {\n              for (let row of this.data) {\n                  if (row[this.idKey] === this.storeValue) {\n                      return row[this.textKey]\n                  }\n              }\n          }\n      },\n      methods: {\n          valid () {\n              if (!this.readonly) {\n                  if (this.storeValue === '') {\n                      this.errorMessage = '请选择一项'\n                      this.hasError = true\n                  }\n                  this.$store.dispatch('reportValid', {'id': this.uid, 'result': !this.hasError})\n              }\n          },\n          choose (row) {\n              let textKey = this.columsDefine.textKey\n              let idKey = this.columsDefine.idKey\n              this.storeValue = row[idKey]\n              this.displayValue = row[textKey]\n              this.modal = false\n          },\n          selectRow (backRow) {\n              let name = []\n              backRow.forEach(function (item, index) {\n                  name.push(item.name)\n              })\n              let stringAfter = name.join(',')\n              this.container = stringAfter\n          },\n          selectAll (backAll) {\n              let name = []\n              backAll.forEach(function (item, index) {\n                  name.push(item.name)\n              })\n              let stringAfter = name.join(',')\n              this.container = stringAfter\n          },\n          ok () {\n              this.value1 = this.container\n          }\n      }\n  }\n</script>\r\n<style>\r\n  /*.ivu-modal-footer {*/\r\n  /*display: none;*/\r\n  /*}*/\r\n</style>\r\n"}},"E:\\project\\vue_v2\\src\\components\\m-deliverables.vue":{"size":16936,"mtime":1510055368222,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-deliverables.vue","messages":[],"errorCount":0,"warningCount":0,"output":"<template>\r\n  <div>\r\n    <Row class=\"titleAll\">\r\n      <div class=\"bread\">\r\n        <!--<p v-if=\"define.title\" v-text=\"define.title\" class=\"topTitle\"></p>-->\r\n        <!--<Breadcrumb>-->\r\n        <!--<Breadcrumb-item v-for=\"item in define.subtitle\" href=\"\">-->\r\n        <!--{{item}}-->\r\n        <!--</Breadcrumb-item>-->\r\n        <!--</Breadcrumb>-->\r\n        <div v-for=\"item in define.operation\" class=\"config\" style=\"float: left\">\r\n          <div class=\"operation\">\r\n            <Button type=\"primary\" v-if=\"item.url\" shape=\"circle\" @click=\"getMeta(item.url)\">{{item.name}}</Button>\r\n            <Button type=\"primary\" v-else shape=\"circle\" @click=\"showModal(item.name)\">{{item.name}}</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"search\">\r\n        <Input v-model.lazy=\"search\" placeholder=\"筛选\">\r\n        <Button slot=\"append\" icon=\"ios-search\"></Button>\r\n        </Input>\r\n      </div>\r\n    </Row>\r\n    <!--<Row style=\"margin-bottom: 3px\">-->\r\n    <!--<div v-for=\"item in define.operation\"  class=\"config\" style=\"float: left\">-->\r\n    <!--<div class=\"operation\">-->\r\n    <!--<Button type=\"primary\" v-if=\"item.url\" shape=\"circle\" @click=\"getMeta(item.url)\">{{item.name}}</Button>-->\r\n    <!--<Button type=\"primary\" v-else shape=\"circle\" @click=\"showModal(item.name)\">{{item.name}}</Button>-->\r\n    <!--</div>-->\r\n    <!--</div>-->\r\n    <!--</Row>-->\r\n    <div v-if=\"storeStatus=='editable'\" class=\"operation\">\r\n      <Button type=\"primary\" shape=\"circle\" @click=\"openModal\">新建</Button>\r\n    </div>\r\n    <div style=\"padding: 0 0;\">\r\n      <!--{{dataSource}}-->\r\n      <Table :columns=\"columns\" :data=\"searchData\" @on-select=\"checkSelect\"></Table>\r\n    </div>\r\n    <div>\r\n      <Modal :loading=\"loading\" v-model=\"modalState\" @on-cancel=\"abort2Table\" @on-ok=\"submit2Table\">\r\n        <mForm :confirm=\"confirm\"\r\n               :define=\"formDefine\"\r\n               :isNew=\"modalData.id === dataSource.length\"\r\n               :content=\"modalData\"\r\n               :openState=\"modalState\"\r\n               @updateData=\"updateData\">\r\n        </mForm>\r\n      </Modal>\r\n    </div>\r\n    <!--<Tabs>-->\r\n    <!--<Tab-pane label=\"一览信息\" icon=\"android-apps\"></Tab-pane>-->\r\n    <!--<Tab-pane label=\"完成顺序\" icon=\"android-exit\">暂无内容</Tab-pane>-->\r\n    <!--<Tab-pane label=\"进度矩阵\" icon=\"ios-analytics\">暂无内容</Tab-pane>-->\r\n    <!--</Tabs>-->\r\n  </div>\r\n</template>\r\n<script>\r\n  //  import Vue from 'vue'\n  import _ from 'lodash'\n  import bus from '../router/bus'\n  import { dispatch } from '../utils/actionUtils'\n  import { default as fetch } from '../utils/DefineFetcher'\n  import mForm from './base/m-form.vue'\n\n  export default {\n      props: ['define', 'content'],\n      components: {mForm},\n      data () {\n          return {\n              confirm: false,\n              modalState: false,\n              tableDelData: [],\n              index: 0,\n              columns: [{}],\n              dataSource: [],\n              formDefine: [],\n              modalData: {id: 0},\n              loading: true,\n              search: '',\n              showIndex: true,\n              selectRow: ''\n          }\n      },\n      mounted () {\n          bus.$on('confirmData', (data) => {\n              let total = []\n              total.concat(this.dataSource)\n              total.concat(this.tableDelData)\n              data.table = total\n          })\n          let url = this.define.data_url\n          if (url) {\n              fetch(url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          } else {\n              this.$set(this.define, 'rows', [])\n          }\n      },\n      computed: {\n      /* table row 数据 */\n          tableVuex: {\n              get () {\n                  return _.get(this.$store.state.pageData.data, [this.tableName, 'value'], null)\n              },\n              set (value) {\n                  this.$store.commit('updateItem', {name: this.tableName, exType: this.exType, exContent: this.exContent, value: this.dataSource})\n              }\n          },\n      /* table是否为可编辑状态 */\n          storeStatus () {\n              return this.$store.state.pageStatus.status[this.tableName]\n          },\n          tableName () {\n              return _.get(this.define, 'name', 'table')\n          },\n          'exContent': function () {\n              return _.get(this.define, 'exContent', {})\n          },\n          searchData: function () {\n              let search = this.search\n              if (search) {\n                  return this.dataSource.filter(function (product) {\n                      return Object.keys(product).some(function (key) {\n                          return String(product[key]).toLowerCase().indexOf(search) > -1\n                      })\n                  })\n              }\n              return this.dataSource\n          }\n      },\n      watch: {\n          define (newVal) {\n              this.dataSource = newVal.rows instanceof Array ? _.cloneDeep(newVal.rows) : []\n              this.formDefine = _.get(newVal, 'cols', [])\n              this.columns = this.getColumns()\n              this.modalData.id = this.dataSource.length\n          },\n          storeStatus () {\n              this.columns = this.getColumns()\n          },\n      /* 当data_url发生变化时更新table数据 */\n          'define.data_url' (to, from) {\n              fetch(this.define.data_url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          },\n      /* 当vuex中数据改变时更新table数据 */\n          tableVuex (newVal) {\n              this.dataSource = newVal\n          }\n      },\n      methods: {\n          checkSelect (row) {\n              this.selectRow = row\n          },\n          submit2Table () {\n              this.confirm = true\n              this.modalState = false\n          },\n          abort2Table () {\n              this.confirm = false\n          },\n          openModal () {\n              this.modalState = true\n              this.modalData = {id: this.dataSource.length}\n          },\n          updateData (val) {\n              let data = {}\n        // 更新数据\n              console.log('val.id', val.id)\n\n              if (this.dataSource.some(data => data.id === val.id)) {\n                  let flag = 0\n                  for (let i in this.dataSource) {\n                      let temp = this.dataSource[i]\n                      if (temp.id === val.id) {\n                          flag = i\n                          data = _.cloneDeep(temp)\n                          break\n                      }\n                  }\n                  data = _.assign(data, val)\n                  data._confirm = true\n                  data._operation = 'update'\n                  let dataSource = _.cloneDeep(this.dataSource)\n                  dataSource.splice(flag, 1, data)\n                  this.dataSource = dataSource\n          // 添加数据\n              } else {\n                  data._confirm = true\n                  data._operation = 'create'\n                  data = _.assign(data, val)\n                  let newRows = _.cloneDeep(this.define.rows)\n                  newRows.push(data)\n                  this.dataSource.push(data)\n                  let id = this.modalData.id\n                  this.modalData = {}\n                  this.modalData.id = ++id\n              }\n              this.tableVuex = {}\n          },\n      // TODO\n          getColumns () {\n              let cols = this.define.cols\n              let columns = []\n              for (let i = 0, len = cols.length; i < len; i++) {\n                  let col = cols[i]\n\n                  let obj = {}\n                  if ((!col.visible) || col.visible === null || col.visible === true) {\n                      obj['key'] = col['field']\n                      obj['title'] = col['alias']\n                      if ((col.type === null || col.type === 'string') && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      }\n                      if (col.link === true) {\n                          obj['title'] = col['alias']\n                          obj['render'] = (h, params) => {\n                              return h('a', {\n                                  on: {\n                                      click: () => {\n                                          this.getMeta(params.row._actions[col['field']])\n                                      }\n                                  }\n                              }, params.row[col['field']])\n                          }\n                          columns.unshift(obj)\n                          continue\n                      }\n                      if (col.link === true) {\n                          obj['title'] = col['alias']\n                          obj['render'] = (h, params) => {\n                              return h('a', {\n                                  on: {\n                                      click: () => {\n                                          this.getMeta(params.row._actions[col['field']])\n                                      }\n                                  }\n                              }, params.row[col['field']])\n                          }\n                          columns.unshift(obj)\n                          continue\n                      }\n                      if (col.type === 'boolean' && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      } else if (col.type === 'select' && (col.link === null || col.link === false)) {\n\n                      }\n                      obj.render = function (h, param) {\n                          return h('span', _.get(param, ['row', col['field'], 'text'], param.row[col['field']]))\n                      }\n                      columns.push(obj)\n                  }\n              }\n              if (typeof (this.define.showModalBtn) !== 'undefined' || this.storeStatus === 'editable') {\n                  let operations = []\n                  let temp\n                  for (let i in this.define.showModalBtn) {\n                      let item = this.define.showModalBtn[i]\n                      temp = {}\n                      temp['type'] = 'primary'\n                      temp['component'] = 'Button'\n                      temp['text'] = item.text\n                      temp['field'] = item.field\n                      temp['size'] = 'small'\n                      if (item.type === 'model') {\n                          temp['click'] = 'showModal'\n                      } else {\n                          temp['click'] = 'getMeta'\n                      }\n                      operations.push(temp)\n                  }\n                  if (this.storeStatus === 'editable') {\n                      operations.push({component: 'Button', type: 'info', size: 'small', text: '查看', click: 'viewData'})\n                      operations.push({component: 'Button', type: 'warning', size: 'small', text: '编辑', click: 'editData'})\n                      operations.push({component: 'Button', type: 'error', size: 'small', text: '删除', click: 'delRow'})\n                  }\n\n                  columns.push({\n                      title: '操作',\n//                        width: 260,\n                      key: 'operation',\n                      render: (h, params) => {\n                          let operationList = []\n                          for (let i = 0; i < operations.length; i++) {\n                              let operation = operations[i]\n                              operationList.push(h(operation['component'], {\n                                  props: {\n//                                        type: operation['type'],\n//                                        type: 'text',\n                                      type: 'ghost',\n                                      size: operation['size']\n                                  },\n                                  style: {\n                                      marginRight: '5px'\n//                                        marginRight: '0px',\n                                  },\n                                  on: {\n                                      click: () => {\n                                          let method = operation['click']\n                                          switch (method) {\n                                          case 'showModal':\n                                              break\n                                          case 'getMeta':\n                                              this.getMeta(params.row._actions[operation['field']])\n                                              break\n                                          case 'editData':\n                                          case 'viewData':\n                                          case 'delRow':\n                                              this[operation['click']](params.index)\n                                              break\n                                          }\n                                      }\n                                  }\n                              }, operation['text']))\n                          }\n                          if (operationList.length <= 0) {\n                              return h()\n                          } else return h('div', operationList)\n                      }\n                  })\n              }\n        // 增加索引\n              columns.unshift({\n                  type: 'index',\n                  width: 60,\n                  align: 'center'\n              })\n//                // 增加多选\n//                columns.unshift({\n//                    type: 'selection',\n//                    width: 60,\n//                    align: 'center'\n//                });\n//                //增加筛选\n//                columns.forEach(function (item) {\n//                    if (item.key === 'planstartdate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'plancompletedate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'status'){\n//                        item.filters = [\n//                            {\n//                                label: '已完成',\n//                                value: 0\n//                            },\n//                            {\n//                                label: '未完成',\n//                                value: 1\n//                            }\n//                        ];\n//                        item.filterMultiple = false;\n//                        item.filterMethod = function (value, row) {\n//                            if (value === 0) {\n//                                return row.status === '已完成';\n//                            } else if (value === 1) {\n//                                return row.status === '未完成';\n//                            }\n//                        };\n//                    }\n//                });\n              return columns\n          },\n          delRow (index) {\n              let delData = this.dataSource.splice(index, 1)\n              delData._confirm = true\n              delData._operation = 'delete'\n              this.tableDelData.push(delData)\n          },\n          viewData (index) {\n              this.editData(index)\n          },\n          editData (index) {\n              let data = this.dataSource[index]\n              this.openModal()\n              this.modalData = data\n          },\n          getMeta (action) {\n              dispatch(action)\n          }\n      }\n\n  }\n</script>\r\n<style scoped>\r\n  .title {\r\n    margin: 0 20px 5px;\r\n  }\r\n\r\n  .operation {\r\n    margin: 0 0 5px;\r\n  }\r\n\r\n  .config {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    position: relative;\r\n  }\r\n\r\n  .search {\r\n    position: absolute;\r\n    right: 0;\r\n    max-width: 300px;\r\n  }\r\n\r\n  thead {\r\n    border: none;\r\n  }\r\n\r\n  .topTitle {\r\n    padding-bottom: 2px;\r\n    color: #999;\r\n    font-size: 22px\r\n  }\r\n\r\n  .titleAll {\r\n    margin: 8px 0 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative\r\n  }\r\n\r\n  .ivu-table .demo-table-info-row td {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-error-row td {\r\n    background-color: #ff6600;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table td.demo-table-info-column {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-name {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-age {\r\n    background-color: #ff6600;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-address {\r\n    background-color: #187;\r\n    color: #fff;\r\n  }\r\n</style>\r\n"}},"E:\\project\\vue_v2\\src\\components\\m-listResult.vue":{"size":18629,"mtime":1510055368233,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-listResult.vue","messages":[],"errorCount":0,"warningCount":0,"output":"<template>\r\n  <div>\r\n    <Tabs>\r\n      <Tab-pane label=\"一览信息\" icon=\"android-apps\">\r\n        <Row class=\"titleAll\">\r\n          <div class=\"bread\">\r\n            <p v-if=\"define.title\" v-text=\"define.title\" class=\"topTitle\"></p>\r\n            <Breadcrumb>\r\n              <Breadcrumb-item v-for=\"item in define.subtitle\" href=\"\">\r\n                {{item}}\r\n              </Breadcrumb-item>\r\n            </Breadcrumb>\r\n          </div>\r\n          <div class=\"search\">\r\n            <Input v-model=\"valueSearch\" placeholder=\"筛选\">\r\n            <Button slot=\"append\" icon=\"ios-search\"></Button>\r\n            </Input>\r\n          </div>\r\n        </Row>\r\n        <Row style=\"margin-bottom: 3px\">\r\n          <div v-for=\"item in define.operation\" class=\"config\" style=\"float: left\">\r\n            <div class=\"operation\">\r\n              <Button type=\"primary\" v-if=\"item.url\" shape=\"circle\" @click=\"getMeta(item.url)\">{{item.name}}</Button>\r\n              <Button type=\"primary\" v-else shape=\"circle\" @click=\"showModal(item.name)\">{{item.name}}</Button>\r\n            </div>\r\n          </div>\r\n          <div style=\"float: right\">\r\n            <Button type=\"success\" shape=\"circle\" @click=\"buySubmit\">采购申请</Button>\r\n            <!--<Button type=\"success\" shape=\"circle\" @click=\"materialSubmit\">领料</Button>-->\r\n          </div>\r\n        </Row>\r\n        <div v-if=\"storeStatus=='editable'\" class=\"operation\">\r\n          <Button type=\"primary\" shape=\"circle\" @click=\"openModal\">新建</Button>\r\n        </div>\r\n        <div style=\"padding: 0 0;\">\r\n          <!--{{dataSource}}-->\r\n          <Table :columns=\"columns\" :data=\"dataSource\" @on-select=\"checkSelect\" @on-select-cancel=\"checkCancel\"></Table>\r\n        </div>\r\n        <div>\r\n          <Modal :loading=\"loading\" v-model=\"modalState\" @on-cancel=\"abort2Table\" @on-ok=\"submit2Table\">\r\n            <mForm :confirm=\"confirm\"\r\n                   :define=\"formDefine\"\r\n                   :isNew=\"modalData.id === dataSource.length\"\r\n                   :content=\"modalData\"\r\n                   :openState=\"modalState\"\r\n                   @updateData=\"updateData\">\r\n            </mForm>\r\n          </Modal>\r\n        </div>\r\n      </Tab-pane>\r\n      <Tab-pane label=\"完成顺序\" icon=\"android-exit\">暂无内容</Tab-pane>\r\n      <Tab-pane label=\"进度矩阵\" icon=\"ios-analytics\">暂无内容</Tab-pane>\r\n    </Tabs>\r\n  </div>\r\n</template>\r\n<script>\r\n  //  import Vue from 'vue'\n  import _ from 'lodash'\n  import bus from '../router/bus'\n  import { dispatch } from '../utils/actionUtils'\n  import { default as fetch } from '../utils/DefineFetcher'\n  import mForm from './base/m-form.vue'\n\n  export default {\n      props: ['define', 'content'],\n      components: {mForm},\n      data () {\n          return {\n              confirm: false,\n              modalState: false,\n              tableDelData: [],\n              index: 0,\n              columns: [{}],\n              dataSource: [],\n              formDefine: [],\n              modalData: {id: 0},\n              loading: true,\n              valueSearch: '',\n              showIndex: true,\n              selectRow: ''\n          }\n      },\n      mounted () {\n          bus.$on('confirmData', (data) => {\n              let total = []\n              total.concat(this.dataSource)\n              total.concat(this.tableDelData)\n              data.table = total\n          })\n          let url = this.define.data_url\n          if (url) {\n              fetch(url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          } else {\n              this.$set(this.define, 'rows', [])\n          }\n      },\n      computed: {\n      /* table row 数据 */\n          tableVuex: {\n              get () {\n                  return _.get(this.$store.state.pageData.data, [this.tableName, 'value'], null)\n              },\n              set (value) {\n                  this.$store.commit('updateItem', {name: this.tableName, exType: this.exType, exContent: this.exContent, value: this.dataSource})\n              }\n          },\n      /* table是否为可编辑状态 */\n          storeStatus () {\n              return this.$store.state.pageStatus.status[this.tableName]\n          },\n          tableName () {\n              return _.get(this.define, 'name', 'table')\n          },\n          'exContent': function () {\n              return _.get(this.define, 'exContent', {})\n          }\n      },\n      watch: {\n          define (newVal) {\n              this.dataSource = newVal.rows instanceof Array ? _.cloneDeep(newVal.rows) : []\n              this.formDefine = _.get(newVal, 'cols', [])\n              this.columns = this.getColumns()\n              this.modalData.id = this.dataSource.length\n          },\n          storeStatus () {\n              this.columns = this.getColumns()\n          },\n      /* 当data_url发生变化时更新table数据 */\n          'define.data_url' (to, from) {\n              fetch(this.define.data_url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          },\n      /* 当vuex中数据改变时更新table数据 */\n          tableVuex (newVal) {\n              this.dataSource = newVal\n          }\n      },\n      methods: {\n          checkSelect (row) {\n              this.selectRow = row\n          },\n          buySubmit: function () {\n              let selectRow = this.selectRow\n              let data = []\n              _.forEach(selectRow, function (n, key) {\n                  data.push({\n                      po_ao_id: n.aoid,\n                      po_ao_val: n.quantity\n                  })\n              })\n              let url = 'lt.toptimus.top:9096/prowf/run/startWithBillConvert/1135831478262784/1135840053648384?insId=1'\n              let cc = {\n                  billDetail: data,\n                  billTitle: {},\n                  insId: ' ',\n                  metaId: ' ',\n                  type: ' '\n              }\n              this.$http.post(url, cc).then((response) => {\n                  let code = response.body\n                  let metaId = code.metaId\n                  let billId = code.insId\n                  let jobId = code.jobInsId\n                  window.location.href = 'page?url=%2Fapi%2FformsNew%2FlistDetailsEditJob%2F' + metaId + '%2F' + billId + '%2F' + jobId + '%2F采购申请单%3F'\n              }, (error) => { console.log(error) })\n          },\n          materialSubmit () {\n              let selectRow = this.selectRow\n              let data = []\n              _.forEach(selectRow, function (n, key) {\n                  data.push({\n                      po_ao_id: n.aoid,\n                      po_ao_val: n.quantity\n                  })\n              })\n              let url = 'lt.toptimus.top:9096/prowf/run/startWithBillConvert/1253803069212672/1253834747807744?insId=1'\n              let cc = {\n                  billDetail: data,\n                  billTitle: {},\n                  insId: ' ',\n                  metaId: ' ',\n                  type: ' '\n              }\n              this.$http.post(url, cc).then(\n          (response) => {\n              let code = response.body\n              let metaId = code.metaId\n              let billId = code.insId\n              let jobId = code.jobInsId\n              window.location.href = 'page?url=%2Fapi%2FformsNew%2FlistDetailsEditJob%2F' + metaId + '%2F' + billId + '%2F' + jobId + '%2F生产领料%3F'\n          },\n          (error) => { console.log(error) }\n        )\n          },\n          submit2Table () {\n              this.confirm = true\n              this.modalState = false\n          },\n          abort2Table () {\n              this.confirm = false\n          },\n          openModal () {\n              this.modalState = true\n              this.modalData = {id: this.dataSource.length}\n          },\n          updateData (val) {\n              let data = {}\n        // 更新数据\n              console.log('val.id', val.id)\n\n              if (this.dataSource.some(data => data.id === val.id)) {\n                  let flag = 0\n                  for (let i in this.dataSource) {\n                      let temp = this.dataSource[i]\n                      if (temp.id === val.id) {\n                          flag = i\n                          data = _.cloneDeep(temp)\n                          break\n                      }\n                  }\n                  data = _.assign(data, val)\n                  data._confirm = true\n                  data._operation = 'update'\n                  let dataSource = _.cloneDeep(this.dataSource)\n                  dataSource.splice(flag, 1, data)\n                  this.dataSource = dataSource\n          //  添加数据\n              } else {\n                  data._confirm = true\n                  data._operation = 'create'\n                  data = _.assign(data, val)\n                  let newRows = _.cloneDeep(this.define.rows)\n                  newRows.push(data)\n                  this.dataSource.push(data)\n                  let id = this.modalData.id\n                  this.modalData = {}\n                  this.modalData.id = ++id\n              }\n              this.tableVuex = {}\n          },\n      // TODO\n          getColumns: function () {\n              let cols = this.define.cols\n              let columns = []\n              for (let i = 0, len = cols.length; i < len; i++) {\n                  let col = cols[i]\n\n                  let obj = {}\n                  if ((!col.visible) || col.visible === null || col.visible === true) {\n                      obj['key'] = col['field']\n                      obj['title'] = col['alias']\n                      if ((col.type === null || col.type === 'string') && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      }\n                      if (col.link === true) {\n                          obj['title'] = col['alias']\n                          obj['render'] = (h, params) => {\n                              return h('a', {\n                                  on: {\n                                      click: () => {\n                                          this.getMeta(params.row._actions[col['field']])\n                                      }\n                                  }\n                              }, params.row[col['field']])\n                          }\n                          columns.unshift(obj)\n                          continue\n                      }\n                      if (col.link === true) {\n                          obj['title'] = col['alias']\n                          obj['render'] = (h, params) => {\n                              return h('a', {\n                                  on: {\n                                      click: () => {\n                                          this.getMeta(params.row._actions[col['field']])\n                                      }\n                                  }\n                              }, params.row[col['field']])\n                          }\n                          columns.unshift(obj)\n                          continue\n                      }\n                      if (col.type === 'boolean' && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      } else if (col.type === 'select' && (col.link === null || col.link === false)) {\n\n                      }\n                      obj.render = function (h, param) {\n                          return h('span', _.get(param, ['row', col['field'], 'text'], param.row[col['field']]))\n                      }\n                      columns.push(obj)\n                  }\n              }\n              if (typeof (this.define.showModalBtn) !== 'undefined' || this.storeStatus === 'editable') {\n                  let operations = []\n                  let temp\n                  for (let i in this.define.showModalBtn) {\n                      let item = this.define.showModalBtn[i]\n                      temp = {}\n                      temp['type'] = 'primary'\n                      temp['component'] = 'Button'\n                      temp['text'] = item.text\n                      temp['field'] = item.field\n                      temp['size'] = 'small'\n                      if (item.type === 'model') {\n                          temp['click'] = 'showModal'\n                      } else {\n                          temp['click'] = 'getMeta'\n                      }\n                      operations.push(temp)\n                  }\n                  if (this.storeStatus === 'editable') {\n                      operations.push({component: 'Button', type: 'info', size: 'small', text: '查看', click: 'viewData'})\n                      operations.push({component: 'Button', type: 'warning', size: 'small', text: '编辑', click: 'editData'})\n                      operations.push({component: 'Button', type: 'error', size: 'small', text: '删除', click: 'delRow'})\n                  }\n\n                  columns.push({\n                      title: '操作',\n                      width: 260,\n                      key: 'operation',\n                      render: (h, params) => {\n                          let operationList = []\n                          for (let i = 0; i < operations.length; i++) {\n                              let operation = operations[i]\n                              operationList.push(h(operation['component'], {\n                                  props: {\n//                                        type: operation['type'],\n//                                        type: 'text',\n                                      type: 'ghost',\n                                      size: operation['size']\n                                  },\n                                  style: {\n                                      marginRight: '5px'\n//                                        marginRight: '0px',\n                                  },\n                                  on: {\n                                      click: () => {\n                                          let method = operation['click']\n                                          switch (method) {\n                                          case 'showModal':\n                                              break\n                                          case 'getMeta':\n                                              this.getMeta(params.row._actions[operation['field']])\n                                              break\n                                          case 'editData':\n                                          case 'viewData':\n                                          case 'delRow':\n                                              this[operation['click']](params.index)\n                                              break\n                                          }\n                                      }\n                                  }\n                              }, operation['text']))\n                          }\n                          if (operationList.length <= 0) {\n                              return h()\n                          } else return h('div', operationList)\n                      }\n                  })\n              }\n//        增加索引\n              columns.unshift({\n                  type: 'index',\n                  width: 60,\n                  align: 'center'\n              })\n        // 增加多选\n              columns.unshift({\n                  type: 'selection',\n                  width: 60,\n                  align: 'center'\n              })\n//                //增加筛选\n//                columns.forEach(function (item) {\n//                    if (item.key === 'planstartdate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'plancompletedate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'status'){\n//                        item.filters = [\n//                            {\n//                                label: '已完成',\n//                                value: 0\n//                            },\n//                            {\n//                                label: '未完成',\n//                                value: 1\n//                            }\n//                        ];\n//                        item.filterMultiple = false;\n//                        item.filterMethod = function (value, row) {\n//                            if (value === 0) {\n//                                return row.status === '已完成';\n//                            } else if (value === 1) {\n//                                return row.status === '未完成';\n//                            }\n//                        };\n//                    }\n//                });\n              return columns\n          },\n          delRow (index) {\n              let delData = this.dataSource.splice(index, 1)\n              delData._confirm = true\n              delData._operation = 'delete'\n              this.tableDelData.push(delData)\n          },\n          viewData (index) {\n              this.editData(index)\n          },\n          editData (index) {\n              let data = this.dataSource[index]\n              this.openModal()\n              this.modalData = data\n          },\n          getMeta (action) {\n              dispatch(action)\n          }\n      }\n\n  }\n</script>\r\n<style scoped>\r\n  .title {\r\n    margin: 0 20px 5px;\r\n  }\r\n\r\n  .operation {\r\n    margin: 0 0 5px;\r\n  }\r\n\r\n  .config {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    position: relative;\r\n  }\r\n\r\n  .search {\r\n    position: absolute;\r\n    right: 0;\r\n    max-width: 300px;\r\n  }\r\n\r\n  thead {\r\n    border: none;\r\n  }\r\n\r\n  .topTitle {\r\n    padding-bottom: 2px;\r\n    color: #999;\r\n    font-size: 22px\r\n  }\r\n\r\n  .titleAll {\r\n    margin: 8px 0 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative\r\n  }\r\n\r\n  .ivu-table .demo-table-info-row td {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-error-row td {\r\n    background-color: #ff6600;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table td.demo-table-info-column {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-name {\r\n    background-color: #2db7f5;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-age {\r\n    background-color: #ff6600;\r\n    color: #fff;\r\n  }\r\n\r\n  .ivu-table .demo-table-info-cell-address {\r\n    background-color: #187;\r\n    color: #fff;\r\n  }\r\n</style>\r\n"}},"E:\\project\\vue_v2\\src\\components\\m-listTask.vue":{"size":15575,"mtime":1510055368234,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-listTask.vue","messages":[],"errorCount":0,"warningCount":0,"output":"<template>\r\n  <div>\r\n    <Tabs>\r\n      <Tab-pane label=\"一览信息\" icon=\"android-apps\">\r\n        <Row class=\"titleAll\">\r\n          <div class=\"bread\">\r\n            <p v-if=\"define.title\" v-text=\"define.title\" class=\"topTitle\"></p>\r\n            <Breadcrumb>\r\n              <Breadcrumb-item v-for=\"item in define.subtitle\">{{item}}</Breadcrumb-item>\r\n            </Breadcrumb>\r\n          </div>\r\n          <div class=\"search\">\r\n            <Input v-model=\"valueSearch\" placeholder=\"筛选\">\r\n            <Button slot=\"append\" icon=\"ios-search\"></Button>\r\n            </Input>\r\n          </div>\r\n        </Row>\r\n        <Row style=\"margin-bottom: 3px\">\r\n          <div v-for=\"item in define.operation\" class=\"config\">\r\n            <div class=\"operation\">\r\n              <Button type=\"primary\" v-if=\"item.url\" shape=\"circle\" @click=\"getMeta(item.url)\">{{item.name}}</Button>\r\n              <Button type=\"primary\" v-else shape=\"circle\" @click=\"showModal(item.name)\">{{item.name}}</Button>\r\n            </div>\r\n          </div>\r\n        </Row>\r\n        <div v-if=\"storeStatus=='editable'\" class=\"operation\">\r\n          <Button type=\"primary\" shape=\"circle\" @click=\"openModal\">新建</Button>\r\n        </div>\r\n        <div style=\"padding: 0 0;\">\r\n          <!--{{dataSource}}-->\r\n          <Table :columns=\"columns\" :data=\"dataSource\"></Table>\r\n        </div>\r\n        <div>\r\n          <Modal :loading=\"loading\" v-model=\"modalState\" @on-cancel=\"abort2Table\" @on-ok=\"submit2Table\">\r\n            <mForm :confirm=\"confirm\"\r\n                   :define=\"formDefine\"\r\n                   :isNew=\"modalData.id === dataSource.length\"\r\n                   :content=\"modalData\"\r\n                   :openState=\"modalState\"\r\n                   @updateData=\"updateData\">\r\n            </mForm>\r\n          </Modal>\r\n        </div>\r\n      </Tab-pane>\r\n      <Tab-pane label=\"完成顺序\" icon=\"android-exit\">标签二的内容</Tab-pane>\r\n      <Tab-pane label=\"进度矩阵\" icon=\"ios-analytics\">标签三的内容</Tab-pane>\r\n    </Tabs>\r\n  </div>\r\n</template>\r\n<script>\r\n  //  import Vue from 'vue'\n  import _ from 'lodash'\n  import bus from '../router/bus'\n  import { dispatch } from '../utils/actionUtils'\n  import { default as fetch } from '../utils/DefineFetcher'\n  import mForm from './base/m-form.vue'\n\n  export default {\n      props: ['define', 'content'],\n      components: {mForm},\n      data () {\n          return {\n              confirm: false,\n              modalState: false,\n              tableDelData: [],\n              index: 0,\n              columns: [{}],\n              dataSource: [],\n              formDefine: [],\n              modalData: {id: 0},\n              loading: true,\n              valueSearch: '',\n              showIndex: true\n          }\n      },\n      mounted () {\n          bus.$on('confirmData', (data) => {\n              let total = []\n              total.concat(this.dataSource)\n              total.concat(this.tableDelData)\n              data.table = total\n          })\n          let url = this.define.data_url\n          if (url) {\n              fetch(url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          } else {\n              this.$set(this.define, 'rows', [])\n          }\n      },\n      computed: {\n      /* table row 数据 */\n          tableVuex: {\n              get () {\n                  return _.get(this.$store.state.pageData.data, [this.tableName, 'value'], null)\n              },\n              set (value) {\n                  this.$store.commit('updateItem', {name: this.tableName, exType: this.exType, exContent: this.exContent, value: this.dataSource})\n              }\n          },\n      /* table是否为可编辑状态 */\n          storeStatus () {\n              return this.$store.state.pageStatus.status[this.tableName]\n          },\n          tableName () {\n              return _.get(this.define, 'name', 'table')\n          },\n          'exContent': function () {\n              return _.get(this.define, 'exContent', {})\n          }\n      },\n      watch: {\n          define (newVal) {\n              this.dataSource = newVal.rows instanceof Array ? _.cloneDeep(newVal.rows) : []\n              this.formDefine = _.get(newVal, 'cols', [])\n              this.columns = this.getColumns()\n              this.modalData.id = this.dataSource.length\n          },\n          storeStatus () {\n              this.columns = this.getColumns()\n          },\n      /* 当data_url发生变化时更新table数据 */\n          'define.data_url' (to, from) {\n              fetch(this.define.data_url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          },\n      /* 当vuex中数据改变时更新table数据 */\n          tableVuex (newVal) {\n              this.dataSource = newVal\n          }\n      },\n      methods: {\n          submit2Table () {\n              this.confirm = true\n              this.modalState = false\n          },\n          abort2Table () {\n              this.confirm = false\n          },\n          openModal () {\n              this.modalState = true\n              this.modalData = {id: this.dataSource.length}\n          },\n          updateData (val) {\n              let data = {}\n        // 更新数据\n              console.log('val.id', val.id)\n\n              if (this.dataSource.some(data => data.id === val.id)) {\n                  let flag = 0\n                  for (let i in this.dataSource) {\n                      let temp = this.dataSource[i]\n                      if (temp.id === val.id) {\n                          flag = i\n                          data = _.cloneDeep(temp)\n                          break\n                      }\n                  }\n                  data = _.assign(data, val)\n                  data._confirm = true\n                  data._operation = 'update'\n                  let dataSource = _.cloneDeep(this.dataSource)\n                  dataSource.splice(flag, 1, data)\n                  this.dataSource = dataSource\n          // 添加数据\n              } else {\n                  data._confirm = true\n                  data._operation = 'create'\n                  data = _.assign(data, val)\n                  let newRows = _.cloneDeep(this.define.rows)\n                  newRows.push(data)\n                  this.dataSource.push(data)\n                  let id = this.modalData.id\n                  this.modalData = {}\n                  this.modalData.id = ++id\n              }\n              this.tableVuex = {}\n          },\n      // TODO\n          getColumns () {\n              let cols = this.define.cols\n              let columns = []\n              for (let i = 0, len = cols.length; i < len; i++) {\n                  let col = cols[i]\n\n                  let obj = {}\n                  if ((!col.visible) || col.visible === null || col.visible === true) {\n                      obj['key'] = col['field']\n                      obj['title'] = col['alias']\n                      if ((col.type === null || col.type === 'string') && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      }\n                      if ((col.type === null || col.type === 'string') && col.link === true) {\n              // obj['fixed'] = 'left'\n                          obj['title'] = col['alias']\n                          obj['render'] = (h, params) => {\n                              return h('a', {\n                                  on: {\n                                      click: () => {\n                                          this.getMeta(params.row._actions[col['field']])\n                                      }\n                                  }\n                              }, params.row[col['field']])\n                          }\n                          columns.unshift(obj)\n                          continue\n                      }\n\n                      if (col.type === 'boolean' && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      } else if (col.type === 'select' && (col.link === null || col.link === false)) {\n\n                      }\n                      obj.render = function (h, param) {\n                          return h('span', _.get(param, ['row', col['field'], 'text'], param.row[col['field']]))\n                      }\n                      columns.push(obj)\n                  }\n              }\n              if (typeof (this.define.showModalBtn) !== 'undefined' || this.storeStatus === 'editable') {\n                  let operations = []\n                  let temp\n                  for (let i in this.define.showModalBtn) {\n                      let item = this.define.showModalBtn[i]\n                      temp = {}\n                      temp['type'] = 'primary'\n                      temp['component'] = 'Button'\n                      temp['text'] = item.text\n                      temp['field'] = item.field\n                      temp['size'] = 'small'\n                      if (item.type === 'model') {\n                          temp['click'] = 'showModal'\n                      } else {\n                          temp['click'] = 'getMeta'\n                      }\n                      operations.push(temp)\n                  }\n                  if (this.storeStatus === 'editable') {\n                      operations.push({component: 'Button', type: 'info', size: 'small', text: '查看', click: 'viewData'})\n                      operations.push({component: 'Button', type: 'warning', size: 'small', text: '编辑', click: 'editData'})\n                      operations.push({component: 'Button', type: 'error', size: 'small', text: '删除', click: 'delRow'})\n                  }\n\n                  columns.push({\n                      title: '操作',\n                      width: 140,\n                      key: 'operation',\n                      render: (h, params) => {\n                          let operationList = []\n                          for (let i = 0; i < operations.length; i++) {\n                              let operation = operations[i]\n                              operationList.push(h(operation['component'], {\n                                  props: {\n//                                        type: operation['type'],\n//                                        type: 'text',\n                                      type: 'ghost',\n                                      size: operation['size']\n                                  },\n                                  style: {\n                                      marginRight: '5px'\n//                                        marginRight: '0px',\n                                  },\n                                  on: {\n                                      click: () => {\n                                          let method = operation['click']\n                                          switch (method) {\n                                          case 'showModal':\n                                              break\n                                          case 'getMeta':\n                                              this.getMeta(params.row._actions[operation['field']])\n                                              break\n                                          case 'editData':\n                                          case 'viewData':\n                                          case 'delRow':\n                                              this[operation['click']](params.index)\n                                              break\n                                          }\n                                      }\n                                  }\n                              }, operation['text']))\n                          }\n                          if (operationList.length > 0) {\n                              return h('div', operationList)\n                          } else {\n                              return h()\n                          }\n                      }\n                  })\n              }\n        // 增加索引\n              columns.unshift({\n                  type: 'index',\n                  width: 60,\n                  align: 'center'\n              })\n//                //增加筛选\n//                columns.forEach(function (item) {\n//                    if (item.key === 'planenddate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'planstartdate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'launchdate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'actualenddate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'actualstartdate'){\n//                        item.sortable = true\n//                    } else if (item.key === 'status'){\n//                        item.filters = [\n//                            {\n//                                label: '运行',\n//                                value: 0\n//                            },\n//                            {\n//                                label: '暂停',\n//                                value: 1\n//                            },\n//                            {\n//                                label: '取消',\n//                                value: 2\n//                            },\n//                            {\n//                                label: '关闭',\n//                                value: 3\n//                            }\n//                        ];\n//                        item.filterMultiple = false;\n//                        item.filterMethod = function (value, row) {\n//                            if (value === 0) {\n//                                return row.status === '运行';\n//                            } else if (value === 1) {\n//                                return row.status === '暂停';\n//                            } else if (value === 2) {\n//                                return row.status === '取消';\n//                            } else if (value === 3) {\n//                                return row.status === '关闭';\n//                            }\n//                        };\n//                    }\n//                });\n              return columns\n          },\n          delRow (index) {\n              let delData = this.dataSource.splice(index, 1)\n              delData._confirm = true\n              delData._operation = 'delete'\n              this.tableDelData.push(delData)\n          },\n          viewData (index) {\n              this.editData(index)\n          },\n          editData (index) {\n              let data = this.dataSource[index]\n              this.openModal()\n              this.modalData = data\n          },\n          getMeta (action) {\n              dispatch(action)\n          }\n      }\n\n  }\n</script>\r\n<style scoped>\r\n  .title {\r\n    margin: 0 20px 5px;\r\n  }\r\n\r\n  .operation {\r\n    margin: 0 0 5px;\r\n  }\r\n\r\n  .config {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    position: relative;\r\n  }\r\n\r\n  .search {\r\n    position: absolute;\r\n    right: 0;\r\n    max-width: 300px;\r\n  }\r\n\r\n  thead {\r\n    border: none;\r\n  }\r\n\r\n  .topTitle {\r\n    padding-bottom: 2px;\r\n    color: #999;\r\n    font-size: 22px\r\n  }\r\n\r\n  .titleAll {\r\n    margin: 8px 0 20px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative\r\n  }\r\n</style>\r\n"}},"E:\\project\\vue_v2\\src\\components\\m-table.vue":{"size":12341,"mtime":1510055368243,"hashOfConfig":"bmzflr","results":{"filePath":"E:\\project\\vue_v2\\src\\components\\m-table.vue","messages":[],"errorCount":0,"warningCount":0,"output":"<template>\r\n  <div>\r\n    <!--{{dataSource}}-->\r\n    <h3 class=\"title\">{{define.alias}}</h3>\r\n    <Row>\r\n      <div v-for=\"item in define.operation\" class=\"config\">\r\n        <div class=\"operation\">\r\n          <Button type=\"primary\" v-if=\"item.url\" shape=\"circle\" @click=\"getMeta(item.url)\">{{item.name}}</Button>\r\n          <Button type=\"primary\" v-else shape=\"circle\" @click=\"showModal(item.name)\">{{item.name}}</Button>\r\n        </div>\r\n        <div class=\"search\">\r\n          <Input v-model=\"valueSearch\" placeholder=\"筛选\">\r\n          <Button slot=\"append\" icon=\"ios-search\"></Button>\r\n          </Input>\r\n        </div>\r\n      </div>\r\n    </Row>\r\n    <br>\r\n    <div v-if=\"storeStatus=='editable'\" class=\"operation\">\r\n      <Button type=\"primary\" shape=\"circle\" @click=\"openModal\">添加明细</Button>\r\n    </div>\r\n    <div style=\"padding: 0 20px;\">\r\n      <!--{{dataSource}}-->\r\n      <Table :columns=\"columns\" highlight-row :data=\"dataSource\" border></Table>\r\n    </div>\r\n    <div>\r\n      <Modal :loading=\"loading\" v-model=\"modalState\" @on-cancel=\"abort2Table\" @on-ok=\"submit2Table\">\r\n        <mForm :confirm=\"confirm\"\r\n               :define=\"formDefine\"\r\n               :isNew=\"modalData.id === dataSource.length\"\r\n               :content=\"modalData\"\r\n               :openState=\"modalState\"\r\n               @updateData=\"updateData\">\r\n        </mForm>\r\n      </Modal>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  //  import Vue from 'vue'\n  import _ from 'lodash'\n  import bus from '../router/bus'\n  import { dispatch } from '../utils/actionUtils'\n  import { default as fetch } from '../utils/DefineFetcher'\n  import mForm from './base/m-form.vue'\n  // Vue.component('mForm', mForm)\n  export default {\n      props: ['define', 'content'],\n      components: {mForm},\n      data () {\n          return {\n              confirm: false,\n              modalState: false,\n              tableDelData: [],\n              index: 0,\n              columns: [{}],\n              dataSource: [],\n              formDefine: [],\n              modalData: {id: 0},\n              loading: true,\n              valueSearch: ''\n          }\n      },\n      mounted () {\n          bus.$on('confirmData', (data) => {\n              let total = []\n              total.concat(this.dataSource)\n              total.concat(this.tableDelData)\n              data.table = total\n          })\n          let url = this.define.data_url\n          if (url) {\n              fetch(url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          } else {\n              this.$set(this.define, 'rows', [])\n          }\n      },\n      computed: {\n      /* table row 数据 */\n          tableVuex: {\n              get () {\n                  return _.get(this.$store.state.pageData.data, [this.tableName, 'value'], null)\n              },\n              set (value) {\n//                this.$store.commit('updateItem', {name: '_' + this.tableName, type:'table', value: this.dataSource});\n                  this.$store.commit('updateItem', {name: this.tableName, exType: this.exType, exContent: this.exContent, value: this.dataSource})\n              }\n          },\n      /* table是否为可编辑状态 */\n          storeStatus () {\n              return this.$store.state.pageStatus.status[this.tableName]\n          },\n          tableName () {\n              return _.get(this.define, 'name', 'table')\n          },\n          'exContent': function () {\n              return _.get(this.define, 'exContent', {})\n          }\n      },\n      watch: {\n          define (newVal) {\n              this.dataSource = newVal.rows instanceof Array ? _.cloneDeep(newVal.rows) : []\n              this.formDefine = _.get(newVal, 'cols', [])\n              this.columns = this.getColumns()\n              this.modalData.id = this.dataSource.length\n          },\n          storeStatus () {\n              this.columns = this.getColumns()\n          },\n      /* 当路由发生变化时 data_url不为空的时候重新请求数据 */\n//        $route() {\n//            var _this = this;\n//            var url = _this.define.data_url;\n//            if (url) {\n//                fetch(url, function (error, body) {\n//                    if (error === null) {\n//                        Vue.set(_this.define, \"rows\", body);\n//                    }\n//                })\n//            } else {\n//                Vue.set(_this.define, \"rows\", []);\n//            }\n//        },\n      /* 当data_url发生变化时更新table数据 */\n          'define.data_url' (to, from) {\n              fetch(this.define.data_url, (error, body) => {\n                  if (!error || error === null) {\n                      this.$set(this.define, 'rows', body)\n                  }\n              })\n          },\n      /* 当vuex中数据改变时更新table数据 */\n          tableVuex (newVal) {\n              this.dataSource = newVal\n          }\n      },\n      methods: {\n          submit2Table () {\n              this.confirm = true\n              this.modalState = false\n          },\n          abort2Table () {\n              this.confirm = false\n          },\n          openModal () {\n              this.modalState = true\n              this.modalData = {id: this.dataSource.length}\n          },\n          updateData (val) {\n              let data = {}\n        // 更新数据\n              console.log('val.id', val.id)\n\n              if (this.dataSource.some(data => data.id === val.id)) {\n                  let flag = 0\n                  for (let i in this.dataSource) {\n                      let temp = this.dataSource[i]\n                      if (temp.id === val.id) {\n                          flag = i\n                          data = _.cloneDeep(temp)\n                          break\n                      }\n                  }\n                  data = _.assign(data, val)\n                  data._confirm = true\n                  data._operation = 'update'\n                  let dataSource = _.cloneDeep(this.dataSource)\n                  dataSource.splice(flag, 1, data)\n                  this.dataSource = dataSource\n          // 添加数据\n              } else {\n                  data._confirm = true\n                  data._operation = 'create'\n                  data = _.assign(data, val)\n                  let newRows = _.cloneDeep(this.define.rows)\n                  newRows.push(data)\n                  this.dataSource.push(data)\n                  let id = this.modalData.id\n                  this.modalData = {}\n                  this.modalData.id = ++id\n              }\n              this.tableVuex = {}\n          },\n      // TODO\n          getColumns () {\n              let cols = this.define.cols\n              let columns = []\n              for (let i = 0, len = cols.length; i < len; i++) {\n                  let col = cols[i]\n\n                  let obj = {}\n                  if ((!col.visible) || col.visible === null || col.visible === true) {\n                      obj['key'] = col['field']\n                      obj['title'] = col['alias']\n                      if ((col.type === null || col.type === 'string') && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      }\n                      if ((col.type === null || col.type === 'string') && col.link === true) {\n              // obj['fixed'] = 'left'\n\n                      }\n\n                      if (col.type === 'boolean' && (col.link === null || col.link === false)) {\n                          obj['title'] = col['alias']\n                      } else if (col.type === 'select' && (col.link === null || col.link === false)) {\n\n                      }\n                      obj.render = function (h, param) {\n                          return h('span', _.get(param, ['row', col['field'], 'text'], param.row[col['field']]))\n                      }\n                      columns.push(obj)\n                  }\n              }\n              if (typeof (this.define.showModalBtn) !== 'undefined' || this.storeStatus === 'editable') {\n                  let operations = []\n                  let temp\n                  for (let i in this.define.showModalBtn) {\n                      let item = this.define.showModalBtn[i]\n                      temp = {}\n                      temp['type'] = 'primary'\n                      temp['component'] = 'Button'\n                      temp['text'] = item.text\n                      temp['field'] = item.field\n                      temp['size'] = 'small'\n                      if (item.type === 'model') {\n                          temp['click'] = 'showModal'\n                      } else {\n                          temp['click'] = 'getMeta'\n                      }\n                      operations.push(temp)\n                  }\n                  if (this.storeStatus === 'editable') {\n                      operations.push({component: 'Button', type: 'info', size: 'small', text: '查看', click: 'viewData'})\n                      operations.push({component: 'Button', type: 'warning', size: 'small', text: '编辑', click: 'editData'})\n                      operations.push({component: 'Button', type: 'error', size: 'small', text: '删除', click: 'delRow'})\n                  }\n\n                  columns.push({\n                      title: '操作',\n                      key: 'operation',\n                      render: (h, params) => {\n                          let operationList = []\n                          for (let i = 0; i < operations.length; i++) {\n                              let operation = operations[i]\n                              operationList.push(h(operation['component'], {\n                                  props: {\n                                      type: operation['type'],\n                                      size: operation['size']\n                                  },\n                                  style: {\n                                      marginRight: '5px'\n                                  },\n                                  on: {\n                                      click: () => {\n                                          let method = operation['click']\n                                          switch (method) {\n                                          case 'showModal':\n                                              break\n                                          case 'getMeta':\n                                              this.getMeta(params.row._actions[operation['field']])\n                                              break\n                                          case 'editData':\n                                          case 'viewData':\n                                          case 'delRow':\n                                              this[operation['click']](params.index)\n                                              break\n                                          }\n                                      }\n                                  }\n                              }, operation['text']))\n                          }\n                          if (operationList.length > 0) {\n                              return h('div', operationList)\n                          } else {\n                              return h()\n                          }\n                      }\n                  })\n              }\n              return columns\n          },\n          delRow (index) {\n              let delData = this.dataSource.splice(index, 1)\n              delData._confirm = true\n              delData._operation = 'delete'\n              this.tableDelData.push(delData)\n          },\n          viewData (index) {\n//                console.log(';',index);\n              this.editData(index)\n          },\n          editData (index) {\n              let data = this.dataSource[index]\n              this.openModal()\n              this.modalData = data\n          },\n          getMeta (action) {\n              dispatch(action)\n          }\n      }\n\n  }\n</script>\r\n<style scoped>\r\n  .title {\r\n    margin: 0 20px 5px;\r\n  }\r\n\r\n  .operation {\r\n    margin: 0 20px 5px;\r\n  }\r\n\r\n  .config {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    position: relative;\r\n  }\r\n\r\n  .search {\r\n    margin-left: 20px;\r\n    min-width: 300px;\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n</style>\r\n"}}}